from api import PetFriends
from settings import valid_email, invalid_email, valid_password
import os


pf = PetFriends()


def test_get_api_key_for_invalid_user(email=invalid_email, password=valid_password):
    """ Проверяем что запрос api ключа возвращает статус 403 так как email не действительный"""

    status, result = pf.get_api_key(email, password)

    assert status == 400
    assert result == 400


def test_get_api_key_for_invalid_user(email=valid_email, password=valid_password):
    """ Проверяем что запрос api ключа возвращает статус 200 и в результате содержится слово key"""

    status, result = pf.get_api_key(email, password)

    assert status == 200
    assert 'key' in result

def test_add_new_pet_with_valid_data(name='Циля', animal_type='двортерьер',
                                     age='3', pet_photo=0):
    """Проверяем что можно добавить питомца с некорректными данными"""

    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)

    assert status == 400
    assert result == 400


def test_add_new_pet_with_valid_data(name='Циля', animal_type='двортерьер',
                                     age='3', pet_photo='image/dog.jpg'):
    """Проверяем что можно добавить питомца с корректными данными"""

    pet_photo = os.path.join(os.path.dirname(__file__), pet_photo)

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.add_new_pet(auth_key, name, animal_type, age, pet_photo)

    assert status == 200
    assert result['name'] == name


def test_list_my_pets(filter="my_pets"):
    """Получаем ключ и вызываем список своих питомцев"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    assert status == 200
    assert result['my_pets'] == my_pets

def test_list_my_pets_negative(filter="my_pets", email=453654, password=valid_password):
    """Получаем ключ и вызываем список своих питомцев c неверными данными авторизации"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    assert status == 400
    assert result == 400



def test_list_filter_age(filter='age'):
    """Получаем ключ и вызываем список питомцев пофильтру age"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "3")

    assert status == 200
    assert result['age'] == 3

def test_successful_update_self_pet_info(name='Циля', animal_type='двор', age=7):
    """Проверяем возможность обновления информации о питомце"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")


    if len(my_pets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

        assert status == 200
        assert result['name'] == name
    else:

        raise Exception("There is no my pets")


def test_successful_delete_self_pet():
    """Проверяем возможность удаления своего существующего питомца"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")


    pet_id = my_pets['pets'][0]['id']
    status, _ = pf.delete_pet(auth_key, pet_id)


    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    assert status == 200
    assert pet_id not in my_pets.values()


def test_successful_delete_self_pet():
    """Проверяем возможность удаления несуществующего питомца"""

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    pet_id = 12345
    status, _ = pf.delete_pet(auth_key, pet_id)

    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    assert status == 400
    assert result == 400

